1. Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
    a0, a1, a2. a2 holds 13

2. Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may 
inline functions.)
    There isn't one, it inferred the effects of the function calls and took the result without calling the functions.

3. At what address is the function printf located?
    0x6c4

4. What value is in the register ra just after the jalr to printf in main?
    0x870, the address to the beginning of the string argument going in to printf

5. What is the output?
    HE110 World

6. The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian 
what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
    I wouldn't change 57616 because that number always represents E110, regardless of which endian we use. But 
    I would change 0x00646c72 to be 0x726c6400 because if we read kept it the same as before and read the most
    significant byte first, it would be '\0', which would end the string early.

7. In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) 
Why does this happen?
    Well first of all, it would fail during compilation, but if we pretend that it wouldn't fail, then printf
    would try to pull out a value from register a2, which would have who knows what in there. The register might
    store a 0 bit value, or some junk from a previous function call. Either way, it probably wouldn't be a valid 
    bit value representing a decimal because we didn't load a value into register a2 before calling printf.